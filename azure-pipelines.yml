name: $(BuildID)

schedules:
- cron: "1 0 * * 1"
  displayName: 'Weekly build'
  always: true
  branches:
    include:
    - master

variables:
  SdkVersion: '5.0.100-rc.2.20479.15'
  DotnetVersionCliVersion: '2.0.0-next.7'

stages:
- stage: CI
  displayName: 'CI'
  jobs:
  - job: ci
    displayName: 'CI'
    strategy:
      maxParallel: 3
      matrix:
        linux:
          imageName: 'ubuntu-latest'
        mac:
          imageName: 'macOS-latest'
        windows:
          imageName: 'windows-latest'
    pool:
      vmImage: $(imageName)

    variables:
      DefaultPackageVersion: '0.0.0-ci-$(Build.BuildNumber)'
      ${{ if eq(variables['PackageVersion'], '') }}:
        PackageVersion: '$(DefaultPackageVersion)'
      disable.coverage.autogenerate: 'true'
      EscapedComma: '%2c'
      TestResults: '$(Agent.TempDirectory)'
      CoverageResults: '$(Build.SourcesDirectory)/CoverageResults'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk v$(SdkVersion)'
      inputs:
        packageType: sdk
        version: '$(SdkVersion)'

    - task: CmdLine@2
      displayName: 'Modify SheepTools version'
      condition: and(succeeded(), eq(variables['imageName'], 'ubuntu-latest'))
      inputs:
        failOnStderr: true
        script: |
            dotnet new tool-manifest
            dotnet tool install dotnet-version-cli --version $(DotnetVersionCliVersion)
            dotnet version -f src/SheepTools/SheepTools.csproj              --skip-vcs $(PackageVersion)
            dotnet version -f src/SheepTools.Moq/SheepTools.Moq.csproj      --skip-vcs $(PackageVersion)
            dotnet version -f src/SheepTools.XUnit/SheepTools.XUnit.csproj  --skip-vcs $(PackageVersion)

    - task: SonarCloudPrepare@1
      displayName: 'Prepare SonarCloud analysis'
      condition: and(succeeded(), eq(variables['imageName'], 'windows-latest'))
      inputs:
        SonarCloud: 'SheepTools_SonarCloud'
        organization: 'eduherminio-github'
        scannerMode: 'MSBuild'
        projectKey: 'SheepTools'
        projectName: 'SheepTools'
        extraProperties: |
            sonar.cs.opencover.reportsPaths="$(Build.SourcesDirectory)/**/coverage.opencover.xml"
            sonar.cs.vstest.reportsPaths="$(TestResults)/**/*.trx"

    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: restore
        arguments: '--configuration Release'
        projects: 'SheepToolsSolution.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: build
        arguments: '--configuration Release --no-restore /p:ContinuousIntegrationBuild=true'
        projects: 'SheepToolsSolution.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: test
        arguments: >-
            --configuration Release --no-build
            /p:CollectCoverage=true /p:CoverletOutputFormat="cobertura$(EscapedComma)opencover"
            /p:CoverletOutput=./CoverageResults/ /p:ExcludeByFile="**/*Exceptions.cs$(EscapedComma)**/*Test.cs"
        nobuild: true
        projects: '**/*.Test.csproj'
        publishTestResults: true

    - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
      displayName: 'Generate tests report'
      condition: and(succeeded(), eq(variables['imageName'], 'ubuntu-latest'))
      inputs:
        reports: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
        targetdir: '$(CoverageResults)'
        reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
        assemblyfilters: '-xunit*'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      condition: and(succeeded(), eq(variables['imageName'], 'ubuntu-latest'))
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(CoverageResults)/Cobertura.xml'
        reportDirectory: '$(CoverageResults)'
        pathToSources: '$(Build.SourcesDirectory)'

    - task: DotNetCoreCLI@2
      displayName: 'Generate SheepTools NuGet package'
      condition: and(succeeded(), eq(variables['imageName'], 'ubuntu-latest'))
      inputs:
        command: 'pack'
        arguments: '--configuration Release'
        configuration: 'Release'
        packagesToPack: 'src/**/*.csproj'
        nobuild: true
        packDirectory: '$(Build.SourcesDirectory)/SheepTools/Artifacts'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifact with NuGet package and its symbols'
      condition: and(succeeded(), eq(variables['imageName'], 'ubuntu-latest'))
      inputs:
        pathtoPublish: '$(Build.SourcesDirectory)/SheepTools/Artifacts/'
        artifactName: 'SheepTools'

    - task: SonarCloudAnalyze@1
      displayName: 'Perform SonarCloud analysis'
      condition: and(succeeded(), eq(variables['imageName'], 'windows-latest'))

    - task: SonarCloudPublish@1
      displayName: 'Publish SonarCloud analysis'
      condition: and(succeeded(), eq(variables['imageName'], 'windows-latest'))
      inputs:
        pollingTimeoutSec: '300'

