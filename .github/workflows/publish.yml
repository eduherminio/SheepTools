name: Publish new version

on:
  workflow_dispatch:
    inputs:
      new_package_version:
        description: 'New package version'
        required: true
      should_push_nuget:
        description: 'Push to NuGet'
        default: 'true'
        required: false
      should_push_github:
        description: 'Push to GitHub package registry'
        default: 'true'
        required: false
      should_commit_new_version:
        description: 'Commit and push version increment'
        default: 'true'
        required: false
      should_tag_new_version:
        description: 'Tag version release'
        default: 'true'
        required: false
      should_create_github_release:
        description: 'Create GitHub Release'
        default: 'true'
        required: false

jobs:
  pack:
    runs-on: ubuntu-latest

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      ARTIFACT_DIR: ./artifacts

    steps:
    - uses: actions/checkout@v2.3.3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: 3.1.403

    - name: Set version to ${{ github.event.inputs.new_package_version }}
      shell: pwsh
      run: |
        $input_path = "Directory.Build.props"
        $regex = "(?<=<Version>).*(?=</Version>)"
        (Get-Content $input_path) -Replace $regex, '${{ github.event.inputs.new_package_version }}' | Out-File $input_path

    - name: Build
      run: dotnet build -c Release

    - name: Run tests
      run: dotnet test -c Release --no-build

    - name: Pack
      run: |
        dotnet pack -c Release --no-build src/SheepTools/SheepTools.csproj --include-symbols -o ${{ env.ARTIFACT_DIR }}
        dotnet pack -c Release --no-build src/SheepTools.Moq/SheepTools.Moq.csproj --include-symbols -o ${{ env.ARTIFACT_DIR }}
        dotnet pack -c Release --no-build src/SheepTools.XUnit/SheepTools.XUnit.csproj --include-symbols -o ${{ env.ARTIFACT_DIR }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: SheepTools-publish-artifact
        path: |
          ${{ env.ARTIFACT_DIR }}/*.nupkg
          ${{ env.ARTIFACT_DIR }}/*.snupkg
        if-no-files-found: error

  push:
    runs-on: ubuntu-latest

    needs: pack

    env:
      ARTIFACT_DIR: ./artifacts

    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: SheepTools-publish-artifact
        path: ${{ env.ARTIFACT_DIR }}

    - name: Check path
      run: ls -R ${{ env.ARTIFACT_DIR }}

    - name: Push to NuGet
      if: ${{ github.event.inputs.should_push_nuget == 'true' }}
      run: |
        nuget push ${{ env.ARTIFACT_DIR }}/*.nupkg -ApiKey ${{ secrets.NuGetKey }} -Source https://api.nuget.org/v3/index.json -Verbosity detailed
        nuget push ${{ env.ARTIFACT_DIR }}/*.snupkg -ApiKey ${{ secrets.NuGetKey }} -Source https://api.nuget.org/v3/index.json -Verbosity detailed

    - name: Push to GitHub packages registry
      if: ${{ github.event.inputs.should_push_github == 'true' }}
      run: |
        nuget push ${{ env.ARTIFACT_DIR }}/*.nupkg -ApiKey ${{ secrets.GitHubToken }} -Source https://nuget.pkg.github.com/eduherminio/index.json -Verbosity detailed

    - name: Configure git user
      if: ${{ github.event.inputs.should_push_github == 'true' || github.event.inputs.should_commit_new_version == 'true' }}
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email '<>'

    - name: Commit and push version increment
      if: ${{ github.event.inputs.should_commit_new_version == 'true' }}
      run: |
        git switch ${{ github.ref }}
        git status
        git commit -am "Release v${{ github.event.inputs.new_package_version }}"
        git push

    - name: Tag version release
      if: ${{ github.event.inputs.should_tag_new_version == 'true' }}
      run: |
        git switch ${{ github.ref }}
        git status
        git tag -a v${{ github.event.inputs.new_package_version }} -m "v${{ github.event.inputs.new_package_version }}"
        git push --tags

    - name: Create GitHub release
      id: create_release
      if: ${{ github.event.inputs.should_create_github_release == 'true' && github.event.inputs.should_tag_new_version == 'true' }}
      uses: actions/create-release@v1
      with:
        tag_name: v{{ github.event.inputs.new_package_version }}
        release_name: v{{ github.event.inputs.new_package_version }}
        draft: true
        prerelease: false

    - name: Upload release asset
      if: ${{ github.event.inputs.should_create_github_release == true }}
      uses: actions/upload-release-asset@v1.0.2
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: |
          ${{ env.ARTIFACT_DIR }}/*.nupkg
          ${{ env.ARTIFACT_DIR }}/*.snupkg
